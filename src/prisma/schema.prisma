generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
  engineType    = "binary"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @unique
  name                 String       @unique
  role                 Role         @default(READER)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  requirePasswordReset Boolean      @default(false)
  key                  Key[]
  uploadedPages        Page[]
  uploadedEpubs        EPub[]
  readings             Reading[]
  uploadedSeries       Series[]
  auth_session         Session[]
  userSetting          UserSetting?
  uploadedVolumes      Volume[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Series {
  id           Int      @id @default(autoincrement())
  englishName  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedById String
  japaneseName String   @default("")
  isNsfw       Boolean  @default(false)
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  volumes      Volume[]
  shortName    String   @default("")
}

model Volume {
  id               Int      @id @default(autoincrement())
  number           Int
  seriesId         Int
  cover            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  uploadedById     String
  firstPageIsCover Boolean  @default(false)

  pages      Page[]
  epub       EPub?
  readings   Reading[]
  series     Series    @relation(fields: [seriesId], references: [id])
  uploadedBy User      @relation(fields: [uploadedById], references: [id])

  @@unique([number, seriesId], name: "seriesNum")
}

model EPub {
  id           Int      @id @default(autoincrement())
  volumeId     Int
  fileName     String
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  uploadedBy User   @relation(fields: [uploadedById], references: [id])
  volume     Volume @relation(fields: [volumeId], references: [id])

  @@unique([volumeId])
}

model Page {
  id           Int      @id @default(autoincrement())
  number       Int
  volumeId     Int
  /// [page.OcrPage]
  ocr          Json
  fileName     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedById String
  blockText    String[]
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  volume       Volume   @relation(fields: [volumeId], references: [id])

  @@unique([number, volumeId], name: "volumeNum")
  @@index([blockText], map: "pgroonga_blocks_index")
}

model Reading {
  id                       Int           @id @default(autoincrement())
  userId                   String
  volumeId                 Int
  page                     Int           @default(0)
  epubPage                 String?
  status                   ReadingStatus
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  useTwoPagesOverride      Boolean?      @map("useTwoPages")
  firstPageIsCoverOverride Boolean?
  isActive                 Boolean       @default(true)
  user                     User          @relation(fields: [userId], references: [id])
  volume                   Volume        @relation(fields: [volumeId], references: [id])

  @@unique([userId, volumeId], name: "volumeUser")
}

model UserSetting {
  id                      Int     @id @default(autoincrement())
  userId                  String  @unique
  useTwoPages             Boolean @default(false)
  zoomSensitivity         Int     @default(1)
  useJapaneseTitle        Boolean @default(false)
  showNsfwContent         Boolean @default(false)
  customTitleFormatString String  @default("")
  user                    User    @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  EDITOR
  READER
}

enum ReadingStatus {
  UNREAD
  READING
  READ
}
