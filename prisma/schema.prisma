// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
  engineType    = "binary"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @unique
  name                 String    @unique
  role                 Role      @default(READER)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  requirePasswordReset Boolean   @default(false)
  readings             Reading[]
  uploadedVolumes      Volume[]
  uploadedPages        Page[]
  uploadedSeries       Series[]
  auth_session         Session[]
  key                  Key[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Series {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  volumes      Volume[]
}

model Volume {
  id           Int       @id @default(autoincrement())
  number       Int
  series       Series    @relation(fields: [seriesId], references: [id])
  seriesId     Int
  cover        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById String
  readings     Reading[]
  pages        Page[]

  @@unique(name: "seriesNum", [number, seriesId])
}

model Page {
  id           Int      @id @default(autoincrement())
  number       Int
  volume       Volume   @relation(fields: [volumeId], references: [id])
  volumeId     Int
  ocr          Json
  fileName     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String

  @@unique(name: "volumeNum", [number, volumeId])
}

model Reading {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  volume    Volume        @relation(fields: [volumeId], references: [id])
  volumeId  Int
  page      Int           @default(0)
  status    ReadingStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique(name: "volumeUser", [userId, volumeId])
}

enum Role {
  ADMIN // me
  EDITOR
  READER
}

enum ReadingStatus {
  UNREAD
  READING
  READ
}
